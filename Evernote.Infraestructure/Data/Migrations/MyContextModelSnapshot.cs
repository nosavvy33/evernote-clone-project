// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Evernote.API.Data;

namespace Evernote.APIClone.Migrations
{
    [DbContext(typeof(EvernoteDbContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Evernote.API.Models.Bodega", b =>
                {
                    b.Property<Guid>("BodegaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Capacidad")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BodegaId");

                    b.ToTable("Bodegas");
                });

            modelBuilder.Entity("Evernote.API.Models.Mascota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Raza")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mascotas");
                });

            modelBuilder.Entity("Evernote.API.Models.Movimientos", b =>
                {
                    b.Property<Guid>("MovimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BodegaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Cantidad")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProductoSKU")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SKU")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovimientoId");

                    b.HasIndex("BodegaId");

                    b.HasIndex("ProductoSKU");

                    b.ToTable("Movimientos");
                });

            modelBuilder.Entity("Evernote.API.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Evernote.API.Models.Producto", b =>
                {
                    b.Property<Guid>("SKU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BodegaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Cantidad")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.HasKey("SKU");

                    b.HasIndex("BodegaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Evernote.API.Models.Movimientos", b =>
                {
                    b.HasOne("Evernote.API.Models.Bodega", "Bodega")
                        .WithMany("Movimientos")
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evernote.API.Models.Producto", "Producto")
                        .WithMany("Movimientos")
                        .HasForeignKey("ProductoSKU");

                    b.Navigation("Bodega");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Evernote.API.Models.Producto", b =>
                {
                    b.HasOne("Evernote.API.Models.Bodega", null)
                        .WithMany("Productos")
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evernote.API.Models.Bodega", b =>
                {
                    b.Navigation("Movimientos");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Evernote.API.Models.Producto", b =>
                {
                    b.Navigation("Movimientos");
                });
#pragma warning restore 612, 618
        }
    }
}
